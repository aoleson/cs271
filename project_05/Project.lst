Microsoft (R) Macro Assembler Version 14.00.23506.0	    02/22/16 20:33:32
5Array Sorting and Random Numbers     (project_05.asm	     Page 1 - 1


				TITLE Array Sorting and Random Numbers     (project_05.asm)

				; Author: Alannah Oleson
				; Email: olesona@oregonstate.edu
				; Class number/section: CS271-001
				; Project #5
				; Due date: 2/28/16
				;
				; Description: Write and test a MASM program to perform the following tasks:
				;   1. Introduce the program.
				;   2. Get a user request in the range [min = 10 .. max = 200].
				;   3. Generate request random integers in the range [lo = 100 .. hi = 999], storing them in consecutive elements
				;   of an array.
				;   4. Display the list of integers before sorting, 10 numbers per line.
				;   5. Sort the list in descending order (i.e., largest first).
				;   6. Calculate and display the median value, rounded to the nearest integer.
				;   7. Display the sorted list, 10 numbers per line.
				;
				; Collaborators: I used the week 7 lectures (code and concepts) for stack manipulation, parameter passing, and 
				;   random array generation and sorting.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 0000000A			MIN = 10		;Constant for low user input
 = 000000C8			MAX = 200		;Constant for high user input
 = 00000064			LO = 100		;Constant for lowest random number
 = 000003E7			HI = 999		;Constant for highest random number
 = 000000C8			MAX_SIZE = 200	;Constant for largest array can be


 00000000			.data

 00000000 20 20 20 20 50	intro         BYTE    "    Project #5 - Filling and Sorting Arrays   by Alannah Oleson    CS 271", 0   ;The programmer introduction
	   72 6F 6A 65 63
	   74 20 23 35 20
	   2D 20 46 69 6C
	   6C 69 6E 67 20
	   61 6E 64 20 53
	   6F 72 74 69 6E
	   67 20 41 72 72
	   61 79 73 20 20
	   20 62 79 20 41
	   6C 61 6E 6E 61
	   68 20 4F 6C 65
	   73 6F 6E 20 20
	   20 20 43 53 20
	   32 37 31 00
 0000004A 54 68 69 73 20	how_to        BYTE    "This program generates pseudorandom numbers in [100, 999]. Enter a number in [10, 200] and I will generate that many random numbers, print the list, sort it, then print the sorted list and its median. ", 0   ;Instructions to use the program
	   70 72 6F 67 72
	   61 6D 20 67 65
	   6E 65 72 61 74
	   65 73 20 70 73
	   65 75 64 6F 72
	   61 6E 64 6F 6D
	   20 6E 75 6D 62
	   65 72 73 20 69
	   6E 20 5B 31 30
	   30 2C 20 39 39
	   39 5D 2E 20 45
	   6E 74 65 72 20
	   61 20 6E 75 6D
	   62 65 72 20 69
	   6E 20 5B 31 30
	   2C 20 32 30 30
	   5D 20 61 6E 64
	   20 49 20 77 69
	   6C 6C 20 67 65
	   6E 65 72 61 74
	   65 20 74 68 61
	   74 20 6D 61 6E
	   79 20 72 61 6E
	   64 6F 6D 20 6E
	   75 6D 62 65 72
	   73 2C 20 70 72
	   69 6E 74 20 74
	   68 65 20 6C 69
	   73 74 2C 20 73
	   6F 72 74 20 69
	   74 2C 20 74 68
	   65 6E 20 70 72
	   69 6E 74 20 74
	   68 65 20 73 6F
	   72 74 65 64 20
	   6C 69 73 74 20
	   61 6E 64 20 69
	   74 73 20 6D 65
	   64 69 61 6E 2E
	   20 00

 00000114 48 6F 77 20 6D	num_prompt    BYTE    "How many numbers shall I generate?: ", 0								 ;Prompt for user input number
	   61 6E 79 20 6E
	   75 6D 62 65 72
	   73 20 73 68 61
	   6C 6C 20 49 20
	   67 65 6E 65 72
	   61 74 65 3F 3A
	   20 00
 00000139 4F 75 74 20 6F	out_of_range  BYTE    "Out of range! Please enter a number in the range [10, 200]", 0		 ;Error message when user gives invalid number
	   66 20 72 61 6E
	   67 65 21 20 50
	   6C 65 61 73 65
	   20 65 6E 74 65
	   72 20 61 20 6E
	   75 6D 62 65 72
	   20 69 6E 20 74
	   68 65 20 72 61
	   6E 67 65 20 5B
	   31 30 2C 20 32
	   30 30 5D 00
 00000174 00000000		request		  DWORD   ?																		 ;Amount of terms to display, entered by user

 00000178  000000C8 [		list		  DWORD	  MAX_SIZE DUP(?)				;The array to fill
	    00000000
	   ]

 00000498 54 68 65 20 75	title1		  BYTE   "The unsorted random numbers: ", 0		;To display before sorting
	   6E 73 6F 72 74
	   65 64 20 72 61
	   6E 64 6F 6D 20
	   6E 75 6D 62 65
	   72 73 3A 20 00
 000004B6 54 68 65 20 73	title2		  BYTE	 "The sorted array: ", 0				;To display after sorting
	   6F 72 74 65 64
	   20 61 72 72 61
	   79 3A 20 00
 000004C9 20 20 20 20 00	spaces		  BYTE   "    ", 0								;Formatting
 000004CE 00000000		how_many	  DWORD   0										;Keep track of how many numbers you've printed, for line breaks
 000004D2 54 68 65 20 6D	med_line	  BYTE   "The median of the list is ", 0		;To display the median
	   65 64 69 61 6E
	   20 6F 66 20 74
	   68 65 20 6C 69
	   73 74 20 69 73
	   20 00

 000004ED 57 6F 77 2C 20	goodbye       BYTE    "Wow, that was some exciting sorting!! :D Bye", 0   ;Goodbye string
	   74 68 61 74 20
	   77 61 73 20 73
	   6F 6D 65 20 65
	   78 63 69 74 69
	   6E 67 20 73 6F
	   72 74 69 6E 67
	   21 21 20 3A 44
	   20 42 79 65 00


 00000000			.code

				;---------------------------------------------------------
				; main
				;
				; Main procedure of the program. Calls other procedures.
				; Receives: none
				; Returns: none
				; Requires: none
				;---------------------------------------------------------
 00000000			main PROC
					
 00000000  E8 00000000 E		call	Randomize		;seed the RNG
					
 00000005  68 0000004A R		push	OFFSET how_to
 0000000A  68 00000000 R		push	OFFSET intro
 0000000F  E8 00000070			call	introduction

 00000014  68 00000174 R		push	OFFSET request
 00000019  E8 00000091			call	getData

 0000001E  68 00000178 R		push	OFFSET list
 00000023  FF 35 00000174 R		push	request
 00000029  E8 000000C0			call	fillArray

 0000002E  68 00000498 R		push	OFFSET title1
 00000033  FF 35 00000174 R		push	request
 00000039  68 00000178 R		push	OFFSET list
 0000003E  E8 000000D0			call	displayList

 00000043  68 00000178 R		push	OFFSET list
 00000048  FF 35 00000174 R		push	request
 0000004E  E8 0000012A			call	sortList

 00000053  68 00000178 R		push	OFFSET list
 00000058  FF 35 00000174 R		push	request
 0000005E  E8 00000170			call	displayMedian

 00000063  68 000004B6 R		push	OFFSET title2
 00000068  FF 35 00000174 R		push	request
 0000006E  68 00000178 R		push	OFFSET list
 00000073  E8 0000009B			call	displayList

 00000078  E8 000001B4			call	farewell

					exit	; exit to operating system
 0000007D  6A 00	   *	    push   +000000000h
 0000007F  E8 00000000 E   *	    call   ExitProcess

 00000084			main ENDP


				;---------------------------------------------------------
				; introduction
				;
				; Introduces the programmer and how to use the program.
				; Receives: @intro and @how_to on the stack
				; Returns: none
				; Requires: none
				;---------------------------------------------------------
 00000084			introduction PROC
					
 00000084  55				push	ebp
 00000085  8B EC			mov		ebp, esp

					;Display the program title and the programmer's name
 00000087  8B 55 08			mov		edx, [ebp + 8]		;intro
 0000008A  E8 00000000 E		call	WriteString
 0000008F  E8 00000000 E		call	CrLf
 00000094  E8 00000000 E		call	CrLf

					;Tell the user how to use the program
 00000099  8B 55 0C			mov		edx, [ebp + 12]		;how_to
 0000009C  E8 00000000 E		call	WriteString
 000000A1  E8 00000000 E		call    CrLf
 000000A6  E8 00000000 E		call    CrLf

 000000AB  5D				pop		ebp			;Clean up the stack
 000000AC  C2 0008			ret		8

 000000AF			introduction ENDP


				;---------------------------------------------------------
				; getData
				;
				; Gets input from the user and makes sure it is valid.
				; Receives: @request on the stack; num_prompt and out_of_range are globals
				; Returns: request contains a valid integer in [MIN, MAX]
				; Requires: request is a DWORD
				;---------------------------------------------------------
 000000AF			getData	PROC
					
					;Set up for the loop: do normal proc setup and move the address of request into ebx
 000000AF  55				push	ebp
 000000B0  8B EC			mov		ebp, esp
 000000B2  8B 5D 08			mov		ebx, [ebp + 8]

 000000B5				begin_loop:

						;Prompt for the number of terms to be displayed
 000000B5  BA 00000114 R			mov		edx, OFFSET num_prompt
 000000BA  E8 00000000 E			call	WriteString
 000000BF  E8 00000000 E			call	ReadInt

						;Check if it's too big
 000000C4  3D 000000C8				cmp		eax, MAX
 000000C9  7F 09				jg		invalid_message

						;Check if it's too small
 000000CB  83 F8 0A				cmp		eax, MIN
 000000CE  7C 04				jl		invalid_message

						;If none of the jumps triggered, it's valid, so set assign the value in eax to the request var
 000000D0  89 03				mov		[ebx], eax
 000000D2  EB 16				jmp		end_loop

						;Else, display a message and ask again
 000000D4					invalid_message:
 000000D4  BA 00000139 R				mov		edx, OFFSET out_of_range
 000000D9  E8 00000000 E				call	WriteString
 000000DE  E8 00000000 E				call	CrLf
 000000E3  E8 00000000 E				call	CrLf
 000000E8  EB CB					jmp		begin_loop

 000000EA				end_loop:

 000000EA  5D				pop		ebp			;Clean up the stack
 000000EB  C2 0004			ret		4			;Only pushed on one address

 000000EE			getData ENDP


				;---------------------------------------------------------
				; fillArray
				;
				; Fills a passed array with random numbers in [100, 999]
				; Receives: request (val) on the stack; @list on the stack
				; Returns: list contains (request) random numbers
				; Requires: list is an array of 200 DWORDs; request is valid
				;---------------------------------------------------------
 000000EE			fillArray PROC
					
					;Set up for proc and loop
 000000EE  55				push	ebp
 000000EF  8B EC			mov		ebp, esp
 000000F1  8B 4D 08			mov		ecx, [ebp + 8]		;Request
 000000F4  8B 75 0C			mov		esi, [ebp + 12]		;list

 000000F7				fill_loop:
						
						;Generate the random number (code from slides)
 000000F7  B8 000003E7				mov		eax, HI
 000000FC  83 E8 64				sub		eax, LO
 000000FF  40					inc		eax
 00000100  E8 00000000 E			call	RandomRange
 00000105  83 C0 64				add		eax, LO

						;Stick the number in the array
 00000108  89 06				mov		[esi], eax
 0000010A  83 C6 04				add		esi, 4			;Move esi to point to the next open slot
 0000010D  E2 E8				loop	fill_loop

 0000010F  5D				pop		ebp			;Clean up the stack
 00000110  C2 0008			ret		8

 00000113			fillArray ENDP


				;---------------------------------------------------------
				; displayList
				;
				; Displays the contents of an array.
				; Receives: @title on the stack; request on the stack; @list on the stack; spaces and how_many are globals
				; Returns: none
				; Requires: request is valid and the array is filled with random numbers
				;---------------------------------------------------------

 00000113			displayList PROC
					
					;Set up for proc and init variables
 00000113  55				push	ebp
 00000114  8B EC			mov		ebp, esp
 00000116  8B 75 08			mov		esi, [ebp + 8]		;list
 00000119  8B 4D 0C			mov		ecx, [ebp + 12]		;request
 0000011C  8B 55 10			mov		edx, [ebp + 16]		;title1
 0000011F  C7 05 000004CE R		mov		how_many, 0
	   00000000

					;Display the title
 00000129  E8 00000000 E		call	CrLf
 0000012E  E8 00000000 E		call	WriteString
 00000133  E8 00000000 E		call	CrLf

 00000138				display_loop:
						
						;Display the current number and spaces
 00000138  8B 06				mov		eax, [esi]
 0000013A  E8 00000000 E			call	WriteDec
 0000013F  BA 000004C9 R			mov		edx, OFFSET spaces
 00000144  E8 00000000 E			call	WriteString
 00000149  FF 05 000004CE R			inc		how_many

						;Check whether you need to print a line break
 0000014F  BA 00000000				mov		edx, 0
 00000154  A1 000004CE R			mov		eax, how_many
 00000159  BB 0000000A				mov		ebx, 10
 0000015E  F7 F3				div		ebx
 00000160  83 FA 00				cmp		edx, 0

						;If the remainder isn't 0, then skip printing the line break
 00000163  75 05				jne		end_display_loop

						;Else, print the line break and fall through to loop_cmd
 00000165  E8 00000000 E			call	CrLf

 0000016A				end_display_loop:

						;Keep track of how many you've printed and move esi to the next element
 0000016A  83 C6 04				add		esi, 4
 0000016D  E2 C9				loop	display_loop

 0000016F  E8 00000000 E		call	CrLf
 00000174  E8 00000000 E		call	CrLf

 00000179  5D				pop		ebp			;Clean up the stack
 0000017A  C2 000C			ret		12

 0000017D			displayList ENDP


				;---------------------------------------------------------
				; sortList
				;
				; Sorts the integer array in descending order.
				; Receives: @list on the stack; request on the stack
				; Returns: the array list is sorted in descending order
				; Requires: request is valid and the array is filled with random numbers
				;---------------------------------------------------------
 0000017D			sortList PROC
					
					;Set up for proc and init variables
 0000017D  55				push	ebp
 0000017E  8B EC			mov		ebp, esp
 00000180  8B 4D 08			mov		ecx, [ebp + 8]		;request
 00000183  8B 75 0C			mov		esi, [ebp + 12]		;list
 00000186  49				dec		ecx					;To set up outer loop

					;Start the outer loop
 00000187				outer_loop:
						
						;Get current element and init/save variables
 00000187  8B 06				mov		eax, [esi]
 00000189  8B D6				mov		edx, esi		; i=k
 0000018B  51					push	ecx

						;Start the inner loop
 0000018C					inner_loop:
							
							;Compare list[j] to list[i]
 0000018C  8B 5E 04					mov		ebx, [esi + 4]			;list[j]
 0000018F  8B 02					mov		eax, [edx]				;list[i]
 00000191  3B C3					cmp		eax, ebx

							;If eax >= ebx, you don't need to swap: jump over it
 00000193  7D 0E					jge		do_not_swap

							;Else, push parameters and swap
 00000195  83 C6 04					add		esi, 4
 00000198  56						push	esi
 00000199  52						push	edx
 0000019A  51						push	ecx
 0000019B  E8 00000014					call	exchange
 000001A0  83 EE 04					sub		esi, 4

 000001A3						do_not_swap:
 000001A3  83 C6 04					add		esi, 4
 000001A6  E2 E4					loop	inner_loop

						;End the inner loop and restore outer loop stuff
 000001A8  59					pop		ecx
 000001A9  8B F2				mov		esi, edx
 000001AB  83 C6 04				add		esi, 4
 000001AE  E2 D7				loop	outer_loop


 000001B0  5D				pop		ebp			;Clean up the stack
 000001B1  C2 0008			ret		8

 000001B4			sortList ENDP


				;---------------------------------------------------------
				; exchange
				;
				; Swaps the two passed parameters' locations in the array.
				; Receives: list[i] and list[j] on the stack
				; Returns: the two numbers are swapped
				; Requires: none
				;---------------------------------------------------------
 000001B4			exchange PROC
					
					;Save registers and init variables
 000001B4  55				push	ebp
 000001B5  8B EC			mov		ebp, esp
 000001B7  60				pushad
 000001B8  8B 45 10			mov		eax, [ebp + 16]		;list[j]
 000001BB  8B 5D 0C			mov		ebx, [ebp + 12]		;list[i]
 000001BE  8B D0			mov		edx, eax
 000001C0  2B D3			sub		edx, ebx

					;Swap the two numbers and stick them back in the array
 000001C2  8B F3			mov		esi, ebx
 000001C4  8B 0B			mov		ecx, [ebx]
 000001C6  8B 00			mov		eax, [eax]
 000001C8  89 06			mov		[esi], eax
 000001CA  03 F2			add		esi, edx
 000001CC  89 0E			mov		[esi], ecx

					;Restore vars and clean up the stack
 000001CE  61				popad
 000001CF  5D				pop		ebp
 000001D0  C2 000C			ret		12

 000001D3			exchange ENDP


				;---------------------------------------------------------
				; displayMedian
				;
				; Calculates and displays the median of the list
				; Receives: @list and request, on the stack; med_line is a global
				; Returns: none
				; Requires: none
				;---------------------------------------------------------
 000001D3			displayMedian PROC
					
					;Set up for proc and init variables
 000001D3  55				push	ebp
 000001D4  8B EC			mov		ebp, esp
 000001D6  8B 45 08			mov		eax, [ebp + 8]		;Request
 000001D9  8B 75 0C			mov		esi, [ebp + 12]		;list 

					;Check if the number of elements is even
 000001DC  BA 00000000			mov		edx, 0
 000001E1  BB 00000002			mov		ebx, 2
 000001E6  F7 F3			div		ebx
 000001E8  83 FA 00			cmp		edx, 0
 000001EB  74 0D			je		is_even

					;Else, it's odd, so just count to the middle and display
 000001ED  BB 00000004			mov		ebx, 4
 000001F2  F7 E3			mul		ebx
 000001F4  03 F0			add		esi, eax
 000001F6  8B 06			mov		eax, [esi]
 000001F8  EB 1A			jmp		display_the_num

					;If it's even, average the two middle elements
 000001FA				is_even:
 000001FA  BB 00000004			mov		ebx, 4
 000001FF  F7 E3			mul		ebx
 00000201  03 F0			add		esi, eax
 00000203  8B 06			mov		eax, [esi]
 00000205  03 46 FC			add		eax, [esi - 4]
 00000208  BA 00000000			mov		edx, 0
 0000020D  BB 00000002			mov		ebx, 2
 00000212  F7 F3			div		ebx

 00000214				display_the_num:				;At this point eax should contain the median
 00000214  BA 000004D2 R		mov		edx, OFFSET med_line
 00000219  E8 00000000 E		call	writeString
 0000021E  E8 00000000 E		call	writeDec
 00000223  E8 00000000 E		call	CrLf
 00000228  E8 00000000 E		call	CrLf

					
 0000022D  5D				pop		ebp			;Clean up the stack
 0000022E  C2 0008			ret		8

 00000231			displayMedian ENDP


				;---------------------------------------------------------
				; farewell
				;
				; Says goodbye to the user.
				; Receives: none
				; Returns: none
				; Requires: none
				;---------------------------------------------------------
 00000231			farewell PROC
					
 00000231  BA 000004ED R		mov		edx, OFFSET goodbye
 00000236  E8 00000000 E		call	WriteString
 0000023B  E8 00000000 E		call	CrLf
 00000240  E8 00000000 E		call	CrLf

 00000245  C3				ret

 00000246			farewell ENDP






				END main
Microsoft (R) Macro Assembler Version 14.00.23506.0	    02/22/16 20:33:32
5Array Sorting and Random Numbers     (project_05.asm	     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000051A Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000246 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
displayList  . . . . . . . . . .	P Near	 00000113 _TEXT	Length= 0000006A Public STDCALL
  display_loop . . . . . . . . .	L Near	 00000138 _TEXT	
  end_display_loop . . . . . . .	L Near	 0000016A _TEXT	
displayMedian  . . . . . . . . .	P Near	 000001D3 _TEXT	Length= 0000005E Public STDCALL
  is_even  . . . . . . . . . . .	L Near	 000001FA _TEXT	
  display_the_num  . . . . . . .	L Near	 00000214 _TEXT	
exchange . . . . . . . . . . . .	P Near	 000001B4 _TEXT	Length= 0000001F Public STDCALL
farewell . . . . . . . . . . . .	P Near	 00000231 _TEXT	Length= 00000015 Public STDCALL
fillArray  . . . . . . . . . . .	P Near	 000000EE _TEXT	Length= 00000025 Public STDCALL
  fill_loop  . . . . . . . . . .	L Near	 000000F7 _TEXT	
getData  . . . . . . . . . . . .	P Near	 000000AF _TEXT	Length= 0000003F Public STDCALL
  begin_loop . . . . . . . . . .	L Near	 000000B5 _TEXT	
  invalid_message  . . . . . . .	L Near	 000000D4 _TEXT	
  end_loop . . . . . . . . . . .	L Near	 000000EA _TEXT	
introduction . . . . . . . . . .	P Near	 00000084 _TEXT	Length= 0000002B Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000084 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortList . . . . . . . . . . . .	P Near	 0000017D _TEXT	Length= 00000037 Public STDCALL
  outer_loop . . . . . . . . . .	L Near	 00000187 _TEXT	
  inner_loop . . . . . . . . . .	L Near	 0000018C _TEXT	
  do_not_swap  . . . . . . . . .	L Near	 000001A3 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 000003E7h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 00000064h   
MAX_SIZE . . . . . . . . . . . .	Number	 000000C8h   
MAX  . . . . . . . . . . . . . .	Number	 000000C8h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MIN  . . . . . . . . . . . . . .	Number	 0000000Ah   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 000004ED _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
how_many . . . . . . . . . . . .	DWord	 000004CE _DATA	
how_to . . . . . . . . . . . . .	Byte	 0000004A _DATA	
intro  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
list . . . . . . . . . . . . . .	DWord	 00000178 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
med_line . . . . . . . . . . . .	Byte	 000004D2 _DATA	
num_prompt . . . . . . . . . . .	Byte	 00000114 _DATA	
out_of_range . . . . . . . . . .	Byte	 00000139 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
request  . . . . . . . . . . . .	DWord	 00000174 _DATA	
spaces . . . . . . . . . . . . .	Byte	 000004C9 _DATA	
title1 . . . . . . . . . . . . .	Byte	 00000498 _DATA	
title2 . . . . . . . . . . . . .	Byte	 000004B6 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
